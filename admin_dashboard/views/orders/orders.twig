<link rel="stylesheet" href="/admin_dashboard/views/orders/orders.css">

<div class="nav nav-tabs col-lg-12 justify-content-center" role="tablist">
    <button class="nav-link" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" role="tab" aria-controls="nav-home" aria-selected="true">All Cars</button>
    <button class="nav-link" id="nav-shopping-tab" data-bs-toggle="tab" data-bs-target="#nav-shopping" role="tab" aria-controls="nav-shopping" aria-selected="false">Search Agenda</button>
</div>
<div id="calendar"></div>
{# <iframe src="https://calendar.google.com/calendar/embed?src=arlind12344%40gmail.com&ctz=Europe%2FTirane" style="border: 0" width="800" height="600" frameborder="0" scrolling="no"></iframe> #}

<script>
    $("#calendar").evoCalendar({
        'eventDisplayDefault': false,
        'sidebarDisplayDefault': false,
        'format': 'MM dd, yyyy',
        'todayHighlight': false
    });

    function generateUniqueColor(id) {
        var hue = (id * 137.508) % 360;
        var color = 'hsl(' + hue + ', 70%, 60%)';
        return color;
    }

    let orders = [
        {% for order in orders %}
            {
            orderId: '{{ order.id }}',
            renterName: '{{ order.firstname }} {{ order.lastname }}',
            car: '{{ order.name }}',
            startDate: '{{ order.rental_date|date("M d, Y") }}',
            endDate: '{{ order.rental_date|date_modify('+' ~ order.rental_duration ~ ' days')|date('M d, Y') }}',
            }{% if not loop.last %},{% endif %}
        {% endfor %}
    ];

    function doesOverlap(date) {
        var dateObj = new Date(date);

        // Use Array.prototype.filter() to get all overlapping orders
        var overlappingOrders = orders.filter(order => {
            var startDate = new Date(order.startDate);
            var endDate = new Date(order.endDate);
            return dateObj >= startDate && dateObj <= endDate;
        });

        if (overlappingOrders.length > 0) {
            return overlappingOrders.map(order => {
                return {
                    color: generateUniqueColor(order.orderId),
                    date: dateObj
                }
            });
        } else {
            return [false, ''];
        }
    }



    orders.forEach(order => {
        $("#calendar").evoCalendar('addCalendarEvent', [
            {
                id: order.orderId,
                name: order.renterName,
                type: 'Rental',
                date: order.startDate,
                color: generateUniqueColor(order.orderId)
            }
        ]);
    });

    function generateView() {
        document.querySelectorAll('.calendar-day').forEach(item => {
            let div = item.querySelector('div');
            let date = new Date(div.getAttribute('data-date-val'));
            // go inside the div and hide the soan with class event-indicator if it exists
            let eventIndicator = div.querySelector('.event-indicator');
            if (eventIndicator) eventIndicator.style.display = 'none';

            orders.forEach(order => {
                let startDate = new Date(order.startDate);
                let endDate = new Date(order.endDate);
                
                if (date >= startDate && date <= endDate) {
                    div.style.width = '100%';

                    if (endDate.getTime() == startDate.getTime()) {
                        div.style.backgroundColor = generateUniqueColor(order.orderId);
                        div.style.boxShadow = '0 0 10px ' + generateUniqueColor(order.orderId);
                        div.style.color = 'white';
                        div.style.borderRadius = '20px 20px 20px 20px';
                        return;
                    }

                    div.style.backgroundColor = generateUniqueColor(order.orderId);
                    div.style.boxShadow = '0 0 10px ' + generateUniqueColor(order.orderId);
                    div.style.color = 'white';

                    if (date.getTime() == startDate.getTime()) {
                        div.style.borderRadius = '20px 0 0 20px';
                    } else if (date.getTime() == endDate.getTime()) {
                        div.style.borderRadius = '0 20px 20px 0';
                    } else {
                        div.style.borderRadius = '0';
                    }

                    let overlapResults = doesOverlap(div.getAttribute('data-date-val'));
                    overlapResults = overlapResults.filter((item, index) => {
                        return index < 2;
                    });
                    console.log(overlapResults);
                    if (overlapResults.length > 1) {
                        div.style.height = '45%';

                        let newDiv = item.appendChild(document.createElement('div'));
                        newDiv.className = 'day';
                        newDiv.style.margin = '5px 0';
                        newDiv.style.display = 'flex';
                        newDiv.style.height = '45%';
                        newDiv.style.backgroundColor = overlapResults[0].color;
                        newDiv.style.boxShadow = '0 0 10px ' + overlapResults[0].color;
                        newDiv.style.borderRadius = '20px 0 0 20px';

                        if (date.getTime() == startDate.getTime()) {
                            newDiv.style.borderRadius = '20px 0 0 20px';
                        } else if (date.getTime() == endDate.getTime()) {
                            newDiv.style.borderRadius = '0 20px 20px 0';
                        } else {
                            newDiv.style.borderRadius = '0';
                        }
                        newDiv.style.width = '100%';
                    }
                }
            });
        });
    }

    generateView();
    $('#calendar').on('selectMonth', function(event, newDate, oldDate) {
        generateView();
    });

</script>