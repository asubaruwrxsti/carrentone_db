<link rel="stylesheet" href="/admin_dashboard/views/orders/orders.css">

<div class="nav nav-tabs col-lg-12 justify-content-center" role="tablist">
    <button class="nav-link" id="nav-home-tab" data-bs-toggle="tab" data-bs-target="#nav-home" role="tab" aria-controls="nav-home" aria-selected="true">All Cars</button>
    <button class="nav-link" id="nav-shopping-tab" data-bs-toggle="tab" data-bs-target="#nav-shopping" role="tab" aria-controls="nav-shopping" aria-selected="false">Search Agenda</button>
</div>
<div id="calendar"></div>
{# <iframe src="https://calendar.google.com/calendar/embed?src=arlind12344%40gmail.com&ctz=Europe%2FTirane" style="border: 0" width="800" height="600" frameborder="0" scrolling="no"></iframe> #}

<script>
    $("#calendar").evoCalendar({
        'eventDisplayDefault': false,
        'sidebarDisplayDefault': false,
        'format': 'MM dd, yyyy',
        'todayHighlight': false,
        'firstDayOfWeek': 1
    });

    function generateUniqueColor(id) {
        var hue = (id * 137.508) % 360;
        var color = 'hsl(' + hue + ', 70%, 60%)';
        return color;
    }

    let orders = [
        {% for order in orders %}
            {
            orderId: '{{ order.id }}',
            renterName: '{{ order.firstname }} {{ order.lastname }}',
            car: '{{ order.name }}',
            startDate: '{{ order.rental_date|date("M d, Y") }}',
            endDate: '{{ order.rental_date|date_modify('+' ~ order.rental_duration ~ ' days')|date('M d, Y') }}',
            }{% if not loop.last %},{% endif %}
        {% endfor %}
    ];

    function doesOverlap(date) {
        var dateObj = new Date(date);
        var startDate;
        var endDate;

        // Use Array.prototype.filter() to get all overlapping orders
        var overlappingOrders = orders.filter(order => {
            startDate = new Date(order.startDate);
            endDate = new Date(order.endDate);
            return dateObj >= startDate && dateObj <= endDate;
        });

        if (overlappingOrders.length > 0) {
            return overlappingOrders.map(order => {
                return {
                    color: generateUniqueColor(order.orderId),
                    date: {
                        date: new Date(date),
                        startDate: new Date(order.startDate),
                        endDate: new Date(order.endDate)
                    }
                }
            });
        } else {
            return [false, ''];
        }
    }

    orders.forEach(order => {
        $("#calendar").evoCalendar('addCalendarEvent', [
            {
                id: order.orderId,
                name: order.renterName,
                type: 'Rental',
                date: order.startDate,
                color: generateUniqueColor(order.orderId)
            }
        ]);
    });

    function calculateSpaces(maxOrders, item) {
        let div = item.querySelectorAll('.day');
        if (div.length == 1) return;

        activeRow = Math.floor(new Date(div[0].getAttribute('data-date-val')).getDate() / 7);
        console.log(activeRow);
        console.log(maxOrders);
        //if (maxOrders[activeRow] == undefined) return;
        let divCount = div.length - 1;

        maxOrders.forEach((order, index) => {
            if (order.number == divCount) return;
            order.orders.forEach(value => {
            });
        });
    }

    function generateView() {
        generatedDates = [];
        maxOrders = [];

        document.querySelectorAll('.calendar-day').forEach(item => {
            let div = item.querySelector('div');
            let date = new Date(div.getAttribute('data-date-val'));
            let eventIndicator = div.querySelector('.event-indicator');
            if (eventIndicator) eventIndicator.style.display = 'none';

            orders.forEach(order => {
                let startDate = new Date(order.startDate);
                let endDate = new Date(order.endDate);
                
                if (date >= startDate && date <= endDate) {
                    if (generatedDates.includes(div.getAttribute('data-date-val'))) return;
                    let overlapResults = doesOverlap(div.getAttribute('data-date-val'));
                    generatedDates.push(div.getAttribute('data-date-val'));

                    let result = overlapResults.filter(overlapResult => {
                        return overlapResult.date.date.getTime() == date.getTime();
                    });
                    if (result.length == 0) return;
                    let weekNumber = Math.floor((date.getDate() - 1) / 7);
                    if (maxOrders[weekNumber] == undefined) maxOrders[weekNumber] = {
                        number: 0,
                        orders: []
                    };
                    if (result.length > maxOrders[weekNumber].number) maxOrders[weekNumber] = {
                        number: result.length,
                        orders: result
                    };
                    result.forEach(result => {
                        let newDiv = item.appendChild(document.createElement('div'));
                        newDiv.className = 'day';
                        newDiv.style.margin = '5px 0';
                        newDiv.style.height = '15%';
                        newDiv.style.backgroundColor = result.color;
                        newDiv.style.boxShadow = '0 0 10px ' + result.color;
                        newDiv.style.width = '100%';

                        if (result.date.startDate.getTime() == result.date.date.getTime()) {
                            newDiv.style.borderRadius = '20px 0 0 20px';
                        } else if (result.date.endDate.getTime() == result.date.date.getTime()) {
                            newDiv.style.borderRadius = '0 20px 20px 0';
                        } else{
                            newDiv.style.borderRadius = '0';
                        }
                    });
                }
            });
            calculateSpaces(maxOrders, item);
        });
    }
    generateView();
    $('#calendar').on('selectMonth', function(event, newDate, oldDate) {
        generateView();
    });

</script>